System basicrobot 
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com"  
  
//mqttBroker "broker.hivemq.com" : 1883
//mqttBroker "localhost" : 1883 eventTopic "unibo/p1"

Dispatch cmd       	: cmd(MOVE)    
Dispatch end       	: end(ARG) 
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
  
Event   obstacle   : obstacle( ARG ) 
Event  endall	   : endall( ARG )  
 
Context ctxbasicrobot ip [host="localhost" port=8020]  

CodedQActor datacleaner    context ctxbasicrobot className "rx.dataCleaner"
CodedQActor distancefilter context ctxbasicrobot className "rx.distanceFilter"
 
QActor basicrobot context ctxbasicrobot{
[#
  var StepTime      = 0L
  var StartTime     = 0L    
  var Duration      = 0L    
#]  
 	State s0 initial { 	 
 		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
// 		delay 1000  //give to the realsonar (if any) the time to start
 		println("basicrobot | attempts to activate the sonar pipe")	
 		[#  //For real robots
 			var robotsonar = context!!.hasActor("robotsonar")  
 			if( robotsonar != null ){ 
 				println("basicrobot | WORKING WITH SONARS") 
 				//ACTIVATE THE DATA SOURCE realsonar
 				forward("sonarstart", "sonarstart(1)" ,"robotsonar" ) 				
 				//SET THE PIPE
 				robotsonar.
 				subscribeLocalActor("datacleaner").
 				subscribeLocalActor("distancefilter").
 				subscribeLocalActor("basicrobot")		//in order to perceive obstacle
 			}else{
 				println("basicrobot | WARNING: realsonar NOT FOUND")
 			}
 		#]
  		run unibo.robot.robotSupport.move( "l" )
		run unibo.robot.robotSupport.move( "r" )
 		updateResource [# "stopped" #]
 		discardMsg Off  //WE want receive any msg
 	}
	Goto work
	
	State work{ 
	} 
	Transition t1   //whenMsg   collision   -> handleCollision
					//whenEvent obstacle -> handleCollision
					whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep
				  	whenMsg     end       -> endwork			  
	
	State execcmd{
		//printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
			updateResource [# "move(${payloadArg(0)})" #]
  			//activate the motors 
			run unibo.robot.robotSupport.move( payloadArg(0 ) )
		}
		//decommentare in caso di robot fisico
		//delay 300
	 }
	 Goto work  

   	State doStep{ 
 		//printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
			//println("basicrobot | doStep StepTime =$StepTime ")
 			run unibo.robot.robotSupport.move( "w" )
 			memoCurrentTime StartTime  
		}  
	}  
	Transition t0 
		whenTimeVar StepTime      -> stepPerhapsDone	
		whenEvent  obstacle       -> stepFail		 
  	
 	State stepPerhapsDone{
 		run unibo.robot.robotSupport.move( "h" )  //stop the robot
  		//println("basicrobot | stepPerhapsDone ")
 	}
 	Transition t0 whenTimeVar StepTime    -> stepDone  //StepTime is the worst case
 				  whenEvent obstacle      -> stepFailDetected
	
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the robot
		//println("basicrobot | stepDone ")
		updateResource [# "stepDone" #]
   		replyTo step with stepdone : stepdone(ok)
  	}
	Goto work  
	
	State stepFailDetected{
		println("basicrobot | stepFailDetected near end of step ")
 		replyTo step with stepfail : stepfail($StepTime, obstacle)
    }
	Goto work 
	 
	State stepFail{ //REQUIREMENT req-onestep-time, req-onestep-info
		setDuration Duration from StartTime
 		updateResource [# "stepFail($Duration)" #]
		//println("basicrobot | stepFail after $Duration ")
		emit obstacle : obstacle(unknown)
 		replyTo step with stepfail : stepfail($Duration, obstacle)
    }
	Goto work 
	
	State endwork{ 
		onMsg( end : end( V ) ){ 
			println("basicrobot | endwork")
			updateResource [# "move(end)" #]	 		
			run utils.virtualRobotSupportQak.terminatevr( )
		}
 		emit endall : endall(normal) 
 		terminate 1
	}
	   
}