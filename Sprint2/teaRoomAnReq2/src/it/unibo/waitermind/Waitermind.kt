/* Generated by AN DISI Unibo */ 
package it.unibo.waitermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waitermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "startState"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
				
				val DoClear = 1
				val DoSanitize = 2
				val DoClean = 3
				
				val CollectTime = 4000L
				val DelayTakeDrink = 2000L
				val DelayServeDrink = 2000L
				val DelayTakeClient = 2000L
						 
				val X_home = "0"
				val Y_home = "0"
				
				val X_bar = "6" 
				val Y_bar = "0"
				
				val X_entrance = "0"
				val Y_entrance = "4"
				
				val X_exit = "6"
				val Y_exit = "4"
				
				val X_table_1 = "2"
				val Y_table_1 = "2"
				
				val X_table_2 = "4"
				val Y_table_2 = "2"
				
				data class Table(var state: String ="tableCleaned") { }
				val table1 = Table()
				val table2 = Table()
				
				var Table1IdClient = 0
				var Table2IdClient = 0
				
				var CleaningON = false
				
				var IdClientOccupy = 0
				var TableToOccupy = 0
				var TableToClean = 0
				var IdForOrder = 0
				var IdForPayment = 0
				
		return { //this:ActionBasciFsm
				state("startState") { //this:State
					action { //it:State
						println("waitermind || START")
						updateResourceRep( "startState"  
						)
						 table1.state = "tableDirty"  
					}
					 transition(edgeName="t00",targetState="checkTableToClean",cond=whenDispatch("engineReady"))
				}	 
				state("checkQueue") { //this:State
					action { //it:State
						println("waitermind	|| checkingQueue")
						stateTimer = TimerActor("timer_checkQueue", 
							scope, context!!, "local_tout_waitermind_checkQueue", 100.toLong() )
					}
					 transition(edgeName="t121",targetState="checkTableToClean",cond=whenTimeout("local_tout_waitermind_checkQueue"))   
					transition(edgeName="t122",targetState="reachTableOrder",cond=whenDispatch("clientOrderReady"))
					transition(edgeName="t123",targetState="reachTableCollect",cond=whenDispatch("clientPaymentReady"))
					transition(edgeName="t124",targetState="reachBar",cond=whenDispatch("barmanOrderReady"))
					transition(edgeName="t125",targetState="acceptorinform",cond=whenRequest("smartbellEntryRequest"))
				}	 
				state("checkTableToClean") { //this:State
					action { //it:State
						println("waitermind || checkTableToClean")
						updateResourceRep( "checkTableToClean"  
						)
						if(  table1.state != "tableCleaned" && Table1IdClient == 0  
						 ){println("waitermind || rest")
						 TableToClean = 1  
						}
						else
						 {if(  table2.state != "tableCleaned" && Table2IdClient == 0  
						  ){println("waitermind || rest")
						  TableToClean = 2  
						 }
						 }
					}
					 transition( edgeName="goto",targetState="reachHome", cond=doswitchGuarded({ TableToClean == 0  
					}) )
					transition( edgeName="goto",targetState="reachTableClean", cond=doswitchGuarded({! ( TableToClean == 0  
					) }) )
				}	 
				state("rest") { //this:State
					action { //it:State
						println("waitermind || rest")
						updateResourceRep( "rest" 
						)
					}
					 transition(edgeName="t16",targetState="acceptorinform",cond=whenRequest("smartbellEntryRequest"))
					transition(edgeName="t17",targetState="reachTableOrder",cond=whenDispatch("clientOrderReady"))
					transition(edgeName="t18",targetState="reachBar",cond=whenDispatch("barmanOrderReady"))
					transition(edgeName="t19",targetState="endState",cond=whenDispatch("end"))
					transition(edgeName="t110",targetState="reachTableCollect",cond=whenDispatch("clientPaymentReady"))
				}	 
				state("reachHome") { //this:State
					action { //it:State
						println("waitermind || reachHome")
						updateResourceRep( "reachHome"  
						)
						request("moveTo", "moveTo($X_home,$Y_home)" ,"waiterengine" )  
					}
					 transition(edgeName="t211",targetState="rest",cond=whenReply("done"))
				}	 
				state("acceptorinform") { //this:State
					action { //it:State
						 readLine()  
						if( CleaningON == true  
						 ){forward("stopClean", "stopClean(P)" ,"waiterengine" ) 
						
						                CleaningON = false
						                TableToClean = 0
						}
						println("waitermind || accept or inform")
						if( checkMsgContent( Term.createTerm("smartbellEntryRequest(ID)"), Term.createTerm("smartbellEntryRequest(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("waitermind || Ricevuta richiesta da ID: ${ payloadArg(0) }")
								 IdClientOccupy = payloadArg(0).toInt()  
						}
					}
					 transition( edgeName="goto",targetState="analizeacceptorinform", cond=doswitch() )
				}	 
				state("analizeacceptorinform") { //this:State
					action { //it:State
						if(  table1.state == "tableCleaned"  
						 ){ 	TableToOccupy = 1  
						}
						else
						 {if(  table2.state == "tableCleaned"  
						  ){ TableToOccupy = 2  
						 }
						 }
					}
					 transition( edgeName="goto",targetState="inform", cond=doswitchGuarded({TableToOccupy == 0 
					}) )
					transition( edgeName="goto",targetState="accept", cond=doswitchGuarded({! (TableToOccupy == 0 
					) }) )
				}	 
				state("inform") { //this:State
					action { //it:State
						println("waitermind || nessun tavolo libero")
						 IdClientOccupy = 0  
					}
					 transition( edgeName="goto",targetState="checkQueue", cond=doswitch() )
				}	 
				state("accept") { //this:State
					action { //it:State
						println("waitermind || accept")
						updateResourceRep( "accept"  
						)
						answer("smartbellEntryRequest", "smartbellEntryReply", "smartbellEntryReply($IdClientOccupy)"   )  
					}
					 transition( edgeName="goto",targetState="reachDoor", cond=doswitch() )
				}	 
				state("reachDoor") { //this:State
					action { //it:State
						println("waitermind || reachDoor")
						updateResourceRep( "reachDoor"  
						)
						request("moveTo", "moveTo($X_entrance,$Y_entrance)" ,"waiterengine" )  
					}
					 transition(edgeName="t312",targetState="convoyTable",cond=whenReply("done"))
				}	 
				state("convoyTable") { //this:State
					action { //it:State
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						println("waitermind 		|| wait Enter - pos-> EntranceDoor || (${itunibo.planner.plannerUtil.getPosX()},${itunibo.planner.plannerUtil.getPosY()})")
						 readLine()  
						println("waitermind || convoyTable")
						updateResourceRep( "convoyTable" 
						)
						delay(DelayTakeClient)
						if(  TableToOccupy == 1  
						 ){ 	table1.state = "tableOccupied"
										Table1IdClient = IdClientOccupy
						println("stato tavolo 1: $table1.state")
						request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
						}
						if(  TableToOccupy == 2  
						 ){ 
										table2.state = "tableOccupied"
										Table2IdClient = IdClientOccupy
						println("stato tavolo 2: $table2.state")
						request("moveTo", "moveTo($X_table_2,$Y_table_2)" ,"waiterengine" )  
						}
					}
					 transition(edgeName="t413",targetState="checkQueue",cond=whenReply("done"))
				}	 
				state("reachTableOrder") { //this:State
					action { //it:State
						if( CleaningON == true  
						 ){forward("stopClean", "stopClean(P)" ,"waiterengine" ) 
						 
										CleaningON = false 
										TableToClean = 0
						}
						println("waitermind || reachTableOrder")
						updateResourceRep( "reachTableOrder" 
						)
						if( checkMsgContent( Term.createTerm("clientOrderReady(ID)"), Term.createTerm("clientOrderReady(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("waitermind || client pronto per ordinare ID : ${payloadArg(0)}")
								
												IdForOrder = payloadArg(0).toInt()
								if(  IdForOrder == Table1IdClient  
								 ){request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
								}
								if(  IdForOrder == Table2IdClient  
								 ){request("moveTo", "moveTo($X_table_2,$Y_table_2)" ,"waiterengine" )  
								}
						}
					}
					 transition(edgeName="t514",targetState="waitOrderClient",cond=whenReply("done"))
				}	 
				state("waitOrderClient") { //this:State
					action { //it:State
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						println("waitermind 		|| wait Enter - pos-> Tavolo || (${itunibo.planner.plannerUtil.getPosX()},${itunibo.planner.plannerUtil.getPosY()})")
						 readLine()  
						println("waitermind || waitOrderClient")
						updateResourceRep( "waitOrderClient"  
						)
					}
					 transition(edgeName="t615",targetState="trasmit",cond=whenDispatch("clientOrder"))
				}	 
				state("trasmit") { //this:State
					action { //it:State
						println("waitermind || trasmit")
						updateResourceRep( "trasmit" 
						)
						if( checkMsgContent( Term.createTerm("clientOrder(ID,ORDER)"), Term.createTerm("clientOrder(ID,ORDER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("waitermind || ricevuto ordine ID,ORDER: ${payloadArg(0)},${payloadArg(1)} ")
								forward("waiterOrderForward", "waiterOrderForward(${payloadArg(0)},${payloadArg(1)})" ,"barman" ) 
						}
					}
					 transition( edgeName="goto",targetState="checkQueue", cond=doswitch() )
				}	 
				state("reachBar") { //this:State
					action { //it:State
						if( CleaningON == true  
						 ){forward("stopClean", "stopClean(P)" ,"waiterengine" ) 
						 
										CleaningON = false 
										TableToClean = 0
						}
						println("waitermind || reachBar")
						updateResourceRep( "reachBar" 
						)
						if( checkMsgContent( Term.createTerm("barmanOrderReady(ID)"), Term.createTerm("barmanOrderReady(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("waitermind || order ready client ID: ${payloadArg(0)}")
						}
						request("moveTo", "moveTo($X_bar,$Y_bar)" ,"waiterengine" )  
					}
					 transition(edgeName="t616",targetState="serveTable",cond=whenReply("done"))
				}	 
				state("serveTable") { //this:State
					action { //it:State
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						println("waitermind 		|| wait Enter - pos-> BARMAN || (${itunibo.planner.plannerUtil.getPosX()},${itunibo.planner.plannerUtil.getPosY()})")
						 readLine()  
						println("waitermind || serveTable")
						updateResourceRep( "serveTable" 
						)
						delay(DelayTakeDrink)
						if(  IdForOrder == Table1IdClient  
						 ){request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
						 table1.state = "tableDirty"  
						}
						if(  IdForOrder == Table2IdClient  
						 ){request("moveTo", "moveTo($X_table_2,$Y_table_2)" ,"waiterengine" )  
						 table2.state = "tableDirty"  
						}
					}
					 transition(edgeName="t717",targetState="serveDrinkTable",cond=whenReply("done"))
				}	 
				state("serveDrinkTable") { //this:State
					action { //it:State
						delay(DelayServeDrink)
					}
					 transition( edgeName="goto",targetState="checkQueue", cond=doswitch() )
				}	 
				state("reachTableCollect") { //this:State
					action { //it:State
						if( CleaningON == true  
						 ){forward("stopClean", "stopClean(P)" ,"waiterengine" ) 
						 
										CleaningON = false 
										TableToClean = 0
						}
						println("waitermind || reachTableCollect")
						updateResourceRep( "reachTableCollect" 
						)
						if( checkMsgContent( Term.createTerm("clientPaymentReady(ID)"), Term.createTerm("clientPaymentReady(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("waitermind || client wants to pay ID : ${payloadArg(0)}")
								 IdForPayment = payloadArg(0).toInt()  
						}
						if(  IdForPayment == 1  
						 ){request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
						}
						if(  IdForPayment == 2  
						 ){request("moveTo", "moveTo($X_table_2,$Y_table_2)" ,"waiterengine" )  
						}
					}
					 transition(edgeName="t818",targetState="collect",cond=whenReply("done"))
				}	 
				state("collect") { //this:State
					action { //it:State
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						println("waitermind 		|| wait Enter - pos-> Tavolo || (${itunibo.planner.plannerUtil.getPosX()},${itunibo.planner.plannerUtil.getPosY()})")
						 readLine()  
						println("waitermind || collect")
						updateResourceRep( "collect" 
						)
						delay(CollectTime)
					}
					 transition( edgeName="goto",targetState="convoyExit", cond=doswitch() )
				}	 
				state("convoyExit") { //this:State
					action { //it:State
						println("waitermind || convoyExit")
						updateResourceRep( "convoyExit" 
						)
						if(  IdForPayment == 1  
						 ){ Table1IdClient = 0  
						}
						if(  IdForPayment == 2  
						 ){ Table2IdClient = 0  
						}
						request("moveTo", "moveTo($X_exit,$Y_exit)" ,"waiterengine" )  
					}
					 transition(edgeName="t919",targetState="checkQueue",cond=whenReply("done"))
				}	 
				state("reachTableClean") { //this:State
					action { //it:State
						println("waitermind || reachTableClean")
						updateResourceRep( "reachTableClean" 
						)
						delay(1000) 
						if(  TableToClean == 1 
						 ){request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
						}
						if(  TableToClean == 2 
						 ){request("moveTo", "moveTo($X_table_2,$Y_table_2)" ,"waiterengine" )  
						}
					}
					 transition(edgeName="t1020",targetState="whichCleanState",cond=whenReply("done"))
				}	 
				state("whichCleanState") { //this:State
					action { //it:State
						if(  TableToClean == 1  
						 ){if(  table1.state == "tableClearing" || table1.state == "tableDirty"  
						 ){forward("goToClearing", "goToClearing(P)" ,"waitermind" ) 
						}
						if(  table1.state == "tableSanitizing"  
						 ){forward("goToSanitizing", "goToSanitizing(P)" ,"waitermind" ) 
						}
						if(  table1.state == "tableCleaning"  
						 ){forward("goToCleaning", "goToCleaning(P)" ,"waitermind" ) 
						}
						}
						if(  TableToClean == 2 
						 ){if(  table2.state == "tableClearing" || table2.state == "tableDirty"  
						 ){forward("goToClearing", "goToClearing(P)" ,"waitermind" ) 
						}
						if(  table2.state == "tableSanitizing"  
						 ){forward("goToSanitizing", "goToSanitizing(P)" ,"waitermind" ) 
						}
						if(  table2.state == "tableCleaning"  
						 ){forward("goToCleaning", "goToCleaning(P)" ,"waitermind" ) 
						}
						}
					}
					 transition(edgeName="t021",targetState="tableClearing",cond=whenDispatch("goToClearing"))
					transition(edgeName="t022",targetState="tableSanitizing",cond=whenDispatch("goToSanitizing"))
					transition(edgeName="t023",targetState="tableCleaning",cond=whenDispatch("goToCleaning"))
				}	 
				state("tableClearing") { //this:State
					action { //it:State
						println("waitermind || tableClearing")
						updateResourceRep( "tableClearing" 
						)
						 readLine()  
						if(  TableToClean ==  1  
						 ){ table1.state = "tableClearing"  
						}
						if(  TableToClean ==  2  
						 ){ table2.state = "tableClearing"  
						}
						 
									CleaningON = true
						forward("clean", "clean($DoClear)" ,"waiterengine" ) 
					}
					 transition(edgeName="t1124",targetState="tableSanitizing",cond=whenDispatch("doneCleanRun"))
					transition(edgeName="t1125",targetState="reachTableOrder",cond=whenDispatch("clientOrderReady"))
					transition(edgeName="t1126",targetState="reachTableCollect",cond=whenDispatch("clientPaymentReady"))
					transition(edgeName="t1127",targetState="reachBar",cond=whenDispatch("barmanOrderReady"))
					transition(edgeName="t1128",targetState="acceptorinform",cond=whenRequest("smartbellEntryRequest"))
				}	 
				state("tableSanitizing") { //this:State
					action { //it:State
						println("waitermind || tableSanitizing")
						updateResourceRep( "tableSanitizing" 
						)
						if(  TableToClean ==  1  
						 ){ table1.state = "tableSanitizing"  
						}
						if(  TableToClean ==  2  
						 ){ table2.state = "tableSanitizing"  
						}
						 
									CleaningON = true
						 readLine()  
						forward("clean", "clean($DoSanitize)" ,"waiterengine" ) 
					}
					 transition(edgeName="t1229",targetState="tableCleaning",cond=whenDispatch("doneCleanRun"))
					transition(edgeName="t1230",targetState="reachTableOrder",cond=whenDispatch("clientOrderReady"))
					transition(edgeName="t1231",targetState="reachTableCollect",cond=whenDispatch("clientPaymentReady"))
					transition(edgeName="t1232",targetState="reachBar",cond=whenDispatch("barmanOrderReady"))
					transition(edgeName="t1233",targetState="acceptorinform",cond=whenRequest("smartbellEntryRequest"))
				}	 
				state("tableCleaning") { //this:State
					action { //it:State
						println("waitermind || tableCleaning")
						updateResourceRep( "tableCleaning" 
						)
						if(  TableToClean ==  1  
						 ){ table1.state = "tableCleaning"  
						}
						if(  TableToClean ==  2  
						 ){ table2.state = "tableCleaning"  
						}
						 
									CleaningON = true
						forward("clean", "clean($DoClean)" ,"waiterengine" ) 
					}
					 transition(edgeName="t1234",targetState="updateTableCleaned",cond=whenDispatch("doneCleanRun"))
					transition(edgeName="t1235",targetState="reachTableOrder",cond=whenDispatch("clientOrderReady"))
					transition(edgeName="t1236",targetState="reachTableCollect",cond=whenDispatch("clientPaymentReady"))
					transition(edgeName="t1237",targetState="reachBar",cond=whenDispatch("barmanOrderReady"))
					transition(edgeName="t1238",targetState="acceptorinform",cond=whenRequest("smartbellEntryRequest"))
				}	 
				state("updateTableCleaned") { //this:State
					action { //it:State
						println("waitermind || updateTableCleaned")
						updateResourceRep( "updateTableCleaned"  
						)
						if(  TableToClean ==  1  
						 ){ table1.state = "tableCleaned"  
						}
						if(  TableToClean ==  2  
						 ){ table2.state = "tableCleaned"  
						}
						 
									CleaningON = false
									TableToClean =  0
						stateTimer = TimerActor("timer_updateTableCleaned", 
							scope, context!!, "local_tout_waitermind_updateTableCleaned", 100.toLong() )
					}
					 transition(edgeName="t1239",targetState="checkTableToClean",cond=whenTimeout("local_tout_waitermind_updateTableCleaned"))   
					transition(edgeName="t1240",targetState="reachTableOrder",cond=whenDispatch("clientOrderReady"))
					transition(edgeName="t1241",targetState="reachTableCollect",cond=whenDispatch("clientPaymentReady"))
					transition(edgeName="t1242",targetState="reachBar",cond=whenDispatch("barmanOrderReady"))
					transition(edgeName="t1243",targetState="acceptorinform",cond=whenRequest("smartbellEntryRequest"))
				}	 
				state("endState") { //this:State
					action { //it:State
						println("waitermind || TERMINATES")
						forward("end", "end(V)" ,"waiterengine" ) 
						terminate(0)
					}
				}	 
			}
		}
}
