System tearoom 

//Messages **********************************************************************
//DIVISI PER CHI INVIA 

//**********CLIENT 

Request clientRingEntryRequest : clientEntryRequest(PAYLOAD)
Reply clientRingEntryReply : clientEntryReply(ID) //invia smartbell in realtà

Dispatch clientOrderReady : clientOrderReady(ID)
Dispatch clientOrder : clientOrder (ID, ORDER)
Dispatch clientPaymentReady : clientPaymentReady(ID)

//**********SMARTBELL
Request smartbellEntryRequest : smartbellEntryRequest(ID)
Reply smartbellEntryReply : smartbellEntryReply(ID)
Dispatch smartbellClientRejected : smartbellClientRejected(TEMP) //verso se stesso


//**********BARMAN
Dispatch barmanOrderReady : barmanOrderReady(ID) //= a tavolo o cliente id (per distinguere in futuro)


//**********WAITER
Dispatch waiterOrderForward : waiterOrderForward(ID, ORDER) //Order contenente ID cl. o tavolo (in futuro per distringuere)

//**********WAITER interni
Dispatch clean : clean(R)
Dispatch doneCleanRun : doneCleanRun(P)
Dispatch engineReady : engineReady(P) 
Request moveTo : moveTo(X,Y)
Reply done : done(X,Y)
Dispatch end : end(V)
Request step : step( TIME )	
Reply   stepdone   : stepdone(V)  
Dispatch cmd : cmd(MOVE) 
Reply   stepfail   : stepfail(DURATION, CAUSE)

//**********
Dispatch goToClearing : goToClearing(P)
Dispatch goToSanitizing : goToSanitizing (P)
Dispatch goToCleaning : goToCleaning(P)
  

//**********
Dispatch initSimulation : initSimulation(P)

//end messages ******************************************************************* 
//context and QActors 
/*USE JSON FILE TO READ HOST AND PORT */
Context ctxtearoom ip [host="127.0.0.1" port=8040] 
Context ctxbasicrobot ip [host="localhost" port=8020] 
ExternalQActor basicrobot context ctxbasicrobot 
//ExternalQActor waiterengine context ctxTearoom
//end context and Qactors 


QActor waitermind context ctxtearoom{
	//inizializzazione varibili
	[#		
		val DoClear = 1
		val DoSanitize = 2
		val DoClean = 3
		
		val CollectTime = 4000L
		val DelayTakeDrink = 2000L
		val DelayServeDrink = 2000L
		val DelayTakeClient = 2000L
				 
		val X_home = "0"
		val Y_home = "0"
		
		val X_bar = "6" 
		val Y_bar = "0"
		
		val X_entrance = "0"
		val Y_entrance = "4"
		
		val X_exit = "6"
		val Y_exit = "4"
		
		val X_table_1 = "2"
		val Y_table_1 = "2"
		
		val X_table_2 = "4"
		val Y_table_2 = "2"
		
		data class Table(var state: String ="tableCleaned") { }
		val table1 = Table()
		val table2 = Table()
		
		var Table1IdClient = 0
		var Table2IdClient = 0
		
		var IdClientOccupy = 0
		var TableToOccupy = 0
		var TableToClean = 0
		var IdForOrder = 0
		var IdForPayment = 0
		
	#]
	
	State startState initial{
		println("waitermind || START")
		updateResource [# "startState" #] 
	}
	Transition t0	whenMsg engineReady -> rest
	
	State checkQueue{
		println("waitermind	|| checkingQueue")
	}
	Transition t12	whenTime 100			 -> checkTableToClean
					whenMsg clientOrderReady -> reachTableOrder
					whenMsg clientPaymentReady -> reachTableCollect
					whenMsg barmanOrderReady -> reachBar
					whenRequest smartbellEntryRequest -> acceptorinform
					
	State checkTableToClean{
		
		println("waitermind || checkTableToClean")
		updateResource [# "checkTableToClean" #] 
		
		if [# table1.state != "tableCleaned" && Table1IdClient == 0 #]{
			println("waitermind || rest")
			[# TableToClean = 1 #]
		}
		else {
			
			if [# table2.state != "tableCleaned" && Table2IdClient == 0 #]{
				println("waitermind || rest")
				[# TableToClean = 2 #]
			}
			
		}
		
	}
	Goto reachHome if [# TableToClean == 0 #] else reachTableClean
	
	State rest{
		println("waitermind || rest")
		updateResource [# "rest"#]
	}//end rest
	Transition t1	whenRequest smartbellEntryRequest -> acceptorinform
					whenMsg clientOrderReady -> reachTableOrder
					whenMsg barmanOrderReady -> reachBar
					whenMsg end -> endState
					whenMsg clientPaymentReady -> reachTableCollect
					
	State reachHome{
		//[# readLine() #]
		println("waitermind || reachHome")
		updateResource [# "reachHome" #]
		request waiterengine -m moveTo : moveTo($X_home, $Y_home)
		
	}//end reachHome
	Transition t2	whenReply done -> rest
					
	State acceptorinform{
		
		println("waitermind || accept or inform")
		
		onMsg(smartbellEntryRequest : smartbellEntryRequest(ID)){
			println("waitermind || Ricevuta richiesta da ID: ${ payloadArg(0) }")
			[# IdClientOccupy = payloadArg(0).toInt() #]	
			
		}
		
	}
	Goto analizeacceptorinform
					
	State analizeacceptorinform{
		if [# table1.state == "tableCleaned" #]{
			[# 	TableToOccupy = 1 #]
		}
		else {
			
			if [# table2.state == "tableCleaned" #]{
				[# TableToOccupy = 2 #]
			}
			
		}
	}
	Goto inform if [#TableToOccupy == 0#] else accept
	
	State inform{
		println("waitermind || nessun tavolo libero")
		[# IdClientOccupy = 0 #]
	}
	Goto checkQueue
	
	State accept{
		println("waitermind || accept")
		updateResource [# "accept" #]
		
//		//TEST
//		println("waitermind 	|| wait Enter - doing accept || (${itunibo.planner.plannerUtil.getPosX()},${itunibo.planner.plannerUtil.getPosY()})" )
//		[# readLine() #]
//		//TEST
		
		replyTo smartbellEntryRequest with smartbellEntryReply : smartbellEntryReply($IdClientOccupy)
				
	}//end accept
	Goto	reachDoor
	
	State reachDoor{
		println("waitermind || reachDoor") 
		updateResource [# "reachDoor" #]
		
//		//TEST
//		println("waitermind 	|| wait Enter - doing reachDoor || (${itunibo.planner.plannerUtil.getPosX()},${itunibo.planner.plannerUtil.getPosY()})" )
//		[# readLine() #]
//		//TEST
		
		request waiterengine -m moveTo : moveTo($X_entrance, $Y_entrance)
		
	}//end reachDoor
	Transition t3	whenReply done -> convoyTable
	
	State convoyTable{
		//[# readLine() #]
		println("waitermind || convoyTable")
		updateResource [# "convoyTable"#]
		delayVar DelayTakeClient
		
		if [# TableToOccupy == 1 #]{
			[# 	table1.state = "tableOccupied"
				Table1IdClient = IdClientOccupy
			#]
			println("stato tavolo 1: $table1.state")
			request waiterengine -m moveTo : moveTo($X_table_1, $Y_table_1)
		}
		if [# TableToOccupy == 2 #]{
			[# 
				table2.state = "tableOccupied"
				Table2IdClient = IdClientOccupy
			#]
			println("stato tavolo 2: $table2.state")
			request waiterengine -m moveTo : moveTo($X_table_2, $Y_table_2)
		}
		
		
	}//end convoyTable
	Transition t4	whenReply done -> checkQueue
	
	
	State reachTableOrder{ 
		//[# readLine() #]
		println("waitermind || reachTableOrder")
		updateResource [# "reachTableOrder"#]
		//check table ordering
		onMsg(clientOrderReady : clientOrderReady(ID) ){
			println("waitermind || client pronto per ordinare ID : ${payloadArg(0)}")
			
			[#
				IdForOrder = payloadArg(0).toInt()
			#]

			if [# IdForOrder == Table1IdClient #] {
				request waiterengine -m moveTo : moveTo($X_table_1, $Y_table_1)
			}
			if [# IdForOrder == Table2IdClient #] {
				request waiterengine -m moveTo : moveTo($X_table_2, $Y_table_2)
			}
			
		}
		
		
	}//end reachTableOrder
	Transition t5	whenReply done -> waitOrderClient

	State waitOrderClient{ 		
		println("waitermind || waitOrderClient")
		updateResource [# "waitOrderClient" #]
		
	}
	Transition t6	whenMsg clientOrder -> trasmit
	
	State trasmit {
		//[# readLine() #]
		println("waitermind || trasmit")
		updateResource [# "trasmit"#]	
		onMsg(clientOrder : clientOrder(ID, ORDER)){
			println("waitermind || ricevuto ordine ID,ORDER: ${payloadArg(0)},${payloadArg(1)} ")
			forward barman -m waiterOrderForward : waiterOrderForward($payloadArg(0), $payloadArg(1))
		}
	}// end trasmit
	Goto checkQueue
	
	State reachBar{
		//[# readLine() #]
		println("waitermind || reachBar")
		updateResource [# "reachBar"#]	
		onMsg(barmanOrderReady : barmanOrderReady(ID)){
			println("waitermind || order ready client ID: ${payloadArg(0)}")
		}
		request waiterengine -m moveTo : moveTo($X_bar, $Y_bar)
	}//end reachBar
	Transition t6	whenReply done -> serveTable
	
	State serveTable{
		println("waitermind || serveTable")
		updateResource [# "serveTable"#]	
		delayVar DelayTakeDrink
		
		if [# IdForOrder == Table1IdClient #] {
			request waiterengine -m moveTo : moveTo($X_table_1, $Y_table_1)
			//STATO DEL TAVOLO DA CAMBIARE
			[# table1.state = "tableDirty" #]
		}
		if [# IdForOrder == Table2IdClient #] {
			request waiterengine -m moveTo : moveTo($X_table_2, $Y_table_2)
			//STATO DEL TAVOLO DA CAMBIARE
			[# table2.state = "tableDirty" #]
		}		
		
				
		
	}//end serveTable
	Transition t7	whenReply done -> serveDrinkTable
	
	State serveDrinkTable{
		//per essere realistici
		delayVar DelayServeDrink
	}
	Goto checkQueue
	
	State reachTableCollect{
		//[# readLine() #]
		println("waitermind || reachTableCollect")
		updateResource [# "reachTableCollect"#]
		onMsg(clientPaymentReady : clientPaymentReady(ID)){
			println("waitermind || client wants to pay ID : ${payloadArg(0)}")
			[# IdForPayment = payloadArg(0).toInt() #]
		}
		
		if [# IdForPayment == 1 #] {
			//guardo il messaggio clientPaymentReady e leggo ID e capisco tavolo
			request waiterengine -m moveTo : moveTo($X_table_1, $Y_table_1)	
		}
		if [# IdForPayment == 2 #] {
			//guardo il messaggio clientPaymentReady e leggo ID e capisco tavolo
			request waiterengine -m moveTo : moveTo($X_table_2, $Y_table_2)	
		}
		
	}//end reachTableCollect
	Transition t8	whenReply done -> collect
	
	State collect{
		println("waitermind || collect")
		updateResource [# "collect"#]
		//delay time perchè ci metto un po' a prendere il cash
		delayVar CollectTime
	}//end collect
	Goto convoyExit
	 
	State convoyExit{ 
		//[# readLine() #]
		println("waitermind || convoyExit")
		updateResource [# "convoyExit"#]
		
		if [# IdForPayment == 1 #] {
			[# Table1IdClient = 0 #]	
		}
		if [# IdForPayment == 2 #] {
			[# Table2IdClient = 0 #]	
		}
		
		request waiterengine -m moveTo : moveTo($X_exit, $Y_exit)	
		
	}//end convoyExit
	Transition t9 	whenReply done -> checkQueue
	
	State reachTableClean{
		println("waitermind || reachTableClean")
		updateResource [# "reachTableClean"#]
		delay 1000
		//mi muovo verso il tavolo
		
		//DISTINGUO SE TAVOLO 1 TAVOLO 2
		//TableToClean = 0
		if [# TableToClean == 1#]{
			request waiterengine -m moveTo : moveTo($X_table_1, $Y_table_1)	
		}
		if [# TableToClean == 2#]{
			request waiterengine -m moveTo : moveTo($X_table_2, $Y_table_2)	
		}
			
	}//end reachTableClear
	Transition t10 	whenReply done -> whichCleanState
	
	State whichCleanState{
		
		if [# TableToClean == 1 #]{
			if [# table1.state == "tableClearing" || table1.state == "tableDirty" #] {
				forward waitermind -m goToClearing : goToClearing(P)
			}
			if [# table1.state == "tableSanitizing" #] {
				forward waitermind -m goToSanitizing : goToSanitizing(P)
			}
			if [# table1.state == "tableCleaning" #] {
				forward waitermind -m goToCleaning : goToCleaning(P)
			}	
		}
		
		if [# TableToClean == 2#]{
			if [# table2.state == "tableClearing" || table2.state == "tableDirty" #] {
				forward waitermind -m goToClearing : goToClearing(P)
			}
			if [# table2.state == "tableSanitizing" #] {
				forward waitermind -m goToSanitizing : goToSanitizing(P)
			}
			if [# table2.state == "tableCleaning" #] {
				forward waitermind -m goToCleaning : goToCleaning(P)
			}	
		}
		
		
	}
	Transition t0	whenMsg goToClearing 	-> tableClearing
					whenMsg goToSanitizing 	-> tableSanitizing
					whenMsg goToCleaning 	-> tableCleaning
	

	State tableClearing{	
		[# readLine() #]	
		println("waitermind || tableClearing")
		updateResource [# "tableClearing"#]
		
		if [# TableToClean ==  1 #] {
			[# table1.state = "tableClearing" #]
		}
		if [# TableToClean ==  2 #] {
			[# table2.state = "tableClearing" #]
		}
		
		forward waiterengine -m clean : clean($DoClear)
	}//end tableClear
	Transition t11	whenMsg doneCleanRun -> tableSanitizing
					whenMsg clientOrderReady -> reachTableOrder
					whenMsg clientPaymentReady -> reachTableCollect
					whenMsg barmanOrderReady -> reachBar
					whenRequest smartbellEntryRequest -> acceptorinform
	
	
	State tableSanitizing{
		[# readLine() #]
		println("waitermind || tableSanitizing")
		updateResource [# "tableSanitizing"#]
		
		if [# TableToClean ==  1 #] {
			[# table1.state = "tableSanitizing" #]
		}
		if [# TableToClean ==  2 #] {
			[# table2.state = "tableSanitizing" #]
		}
		
		
		
		forward waiterengine -m clean : clean($DoSanitize)
	}//end tableSanitize
	Transition t12	whenMsg doneCleanRun -> tableCleaning
					whenMsg clientOrderReady -> reachTableOrder
					whenMsg clientPaymentReady -> reachTableCollect
					whenMsg barmanOrderReady -> reachBar
					whenRequest smartbellEntryRequest -> acceptorinform
	
	State tableCleaning{
		[# readLine() #] 
		println("waitermind || tableCleaning")
		updateResource [# "tableCleaning"#]
		
		if [# TableToClean ==  1 #] {
			[# table1.state = "tableCleaning" #]
		}
		if [# TableToClean ==  2 #] {
			[# table2.state = "tableCleaning" #]
		}
		
		
		
		forward waiterengine -m clean : clean($DoClean)
	}//end tableClean
	Transition t12	whenMsg doneCleanRun -> updateTableCleaned
					whenMsg clientOrderReady -> reachTableOrder
					whenMsg clientPaymentReady -> reachTableCollect
					whenMsg barmanOrderReady -> reachBar
					whenRequest smartbellEntryRequest -> acceptorinform
	
	State updateTableCleaned{
		//[# readLine() #]
		println("waitermind || updateTableCleaned")
		updateResource [# "updateTableCleaned" #]
		
		if [# TableToClean ==  1 #] {
			[# table1.state = "tableCleaned" #]
		}
		if [# TableToClean ==  2 #] {
			[# table2.state = "tableCleaned" #]
		}
		
		[# TableToClean =  0 #]
	}
	Transition t12	whenTime 100			 ->     checkTableToClean
					whenMsg clientOrderReady -> reachTableOrder
					whenMsg clientPaymentReady -> reachTableCollect
					whenMsg barmanOrderReady -> reachBar
					whenRequest smartbellEntryRequest -> acceptorinform
	
	
	
	State endState{
		println("waitermind || TERMINATES")
		forward waiterengine -m end : end(V)
		terminate 0
	}//end endState
	
	
	
}
  

 
QActor smartbell context ctxtearoom{
	[# 
		val Temp_max = 47.5
		var ID_client = 1 
		var N_client_rejected = 0
	#] 

	State s0 initial{
		println("smartbell || START")
		updateResource [# "START" #]
	} 
	Goto waitRing
	
	State waitRing{
		println("smartbell || waitRing")
		updateResource [# "waitRing" #]		
	}
	Transition t0 	whenRequest clientRingEntryRequest -> checkTempClient
					whenMsg end -> endState
	State checkTempClient{ 
		[#  var ClientTemp = Math.random()*6+35#] //random temperature
		//[#  var ClientTemp = (Math.round(  Math.random()*6+35)  *10.0)/10.0#] 
		println("smartbell || checkTempClient")
		updateResource [# "checkTempClient" #]	
		if [# ClientTemp < Temp_max #]  
		{
			println("smartbell || clienteAccettatoDaSmartBell || temperatura = $ClientTemp || id_client = $ID_client")
			request waitermind -m smartbellEntryRequest : smartbellEntryRequest($ID_client)  
			[# ID_client++ #]
		}
		else
		{
			println("smartbell || clienteRifiutatoDaSmartBell || temperatura = $ClientTemp")
			forward smartbell -m smartbellClientRejected : smartbellClientRejected($ClientTemp) //per questione statistica
			
		}
	}  
	Transition t1 	whenReply 	smartbellEntryReply -> checkWaiterReply	
					whenMsg 	smartbellClientRejected -> clientRejected
	
	State checkWaiterReply{
		onMsg(smartbellEntryReply : smartbellEntryReply(ID)){
			println("smartbell || ricevuta reply ID : ${ payloadArg(0) }")
			replyTo clientRingEntryRequest with clientRingEntryReply : clientRingEntryReply($payloadArg(0))
		}
	}
	Goto waitRing
	
	State clientRejected{
		[# N_client_rejected++ #]
		onMsg(smartbellClientRejected : smartbellClientRejected(TEMP)){ //rispondo con temperatura (maggior del normale)
			replyTo clientRingEntryRequest with clientRingEntryReply : clientRingEntryReply(payloadArg(0)) 
		}
	}
	Goto waitRing
	
	State endState{
		println("smartbell || END")
		terminate 0
	}
	
}



QActor waiterengine context ctxtearoom{ 
	
		[# 
			var StepTime = 365L
			val BackTime     = 2 * StepTime / 3
			
			val mapRoom  = "teaRoomExplored"
			var XPoint = "0"
			var YPoint = "0"
			
			val TableClearTime = 4000L
			val TableSanitizeTime = 2000L
			val TableCleanTime = 2000L
			
			var CmdToPerform = ""  
		#]
		
	State s0 initial{
		println("waiterengine || START")
		updateResource [# "startState" #]
		
	
		run itunibo.planner.plannerUtil.initAI() 
		run itunibo.planner.plannerUtil.loadRoomMap(mapRoom) 		
		run itunibo.planner.plannerUtil.showCurrentRobotState()	
		
		forward waitermind -m engineReady : engineReady(P)
	}
	Goto waitCmd
	
	
	State waitCmd{
		println("waiterengine || waitCmd")
		updateResource [# "waitCmd" #]
	}
	Transition t0	whenRequest moveTo -> planPath
					whenMsg clean -> cleanTable
	
	
	
	State planPath{
		println("waiterengine || planPath")
		updateResource [# "planPath" #]
		onMsg(moveTo : moveTo(X,Y)){
			[# XPoint = payloadArg(0)
			   YPoint = payloadArg(1)			  
			 #]
			 }
			println("moveTo ($XPoint,$YPoint)")
			run itunibo.planner.plannerUtil.planForGoal("$XPoint","$YPoint")
	}
	Goto readStep
	
	State readStep{
//		println("waiterengine || readStep")
			[#  CmdToPerform = itunibo.planner.plannerUtil.getNextPlannedMove() #]
	}
	Goto execStep if  [# CmdToPerform == "w"#] else execMove
	//funziona? se mi trovo già al punto che succede?
	
	State execMove{
//		println("waiterengine || execMove")
		forward basicrobot -m cmd : cmd($CmdToPerform)
		delay 200
	}
	Goto updateMap
	
	
	State endPath{
		println("waiterengine || endPath")
		updateResource [# "endPath" #]
		println("done moveTo($XPoint,$YPoint)")
		run itunibo.planner.plannerUtil.showCurrentRobotState()
		replyTo moveTo with done : done($XPoint,$YPoint)
	}
	Goto waitCmd
	
	State execStep{
//		println("waiterengine || execStep")
		request basicrobot -m step : step($StepTime)
	}
	Transition t1	whenReply stepdone -> updateMap
					whenReply stepfail   -> errorHandler
	
	State updateMap{
		updateResource [# itunibo.planner.plannerUtil.getMapOneLine() #]
		run itunibo.planner.plannerUtil.updateMap("$CmdToPerform")	
		
	}
	Goto readStep if [# CmdToPerform.length > 0 #] else endPath
	
	State errorHandler{
		println("waiterengine 		|| errorHandler")
		//torno indietro di un po'
		
		onMsg(stepfail : stepfail(DURATION, CAUSE) ){
			[# 
				val D = payloadArg(0).toLong()  
				val Dt = Math.abs(StepTime-D)
				val BackT = D/4 
			#] 
			//println("robotmapper stepFail D= $D, BackTime = ${BackTime} BackT=$BackT")
 			if [# D > BackTime #] {    
				forward basicrobot -m cmd : cmd( s )
				delayVar BackT
				forward basicrobot -m cmd : cmd( h )
			}	
		}	    
	}
	Goto updateMap
	

	State cleanTable{
		onMsg(clean : clean(R)){
			if [# payloadArg(0) == "1" #] 
			{//sono in clear
				println("waiterengine || clearing")
				delayVar TableClearTime
			}//else if
			if [# payloadArg(0) == "2" #]
			{
				println("waiterengine || sanitizing")
				delayVar TableSanitizeTime
			}
			if [# payloadArg(0) == "3" #]
			{
				println("waiterengine || cleaning")
				delayVar TableCleanTime
			} 
		}
		forward waitermind -m doneCleanRun : doneCleanRun(P)
	}
	Goto waitCmd
	
	
}

QActor barman context ctxtearoom{
	[#
		val TimePrepareOrder = 2000L
	#]
	State s0 initial{
		println("barman || START")
		updateResource [# "START" #] 
	}
	Goto waitOrder
	
	State waitOrder{
		println("barman || waitOrder")
		updateResource [# "waitOrder" #]
		
	}
	Transition t0 	whenMsg waiterOrderForward -> prepareOrder
					whenMsg end -> endState
	
	State prepareOrder{ 
		println("barman || prepareOrder")
		updateResource [# "prepareOrder" #]
		delayVar TimePrepareOrder
		onMsg(waiterOrderForward : waiterOrderForward(ID, ORDER)){
			println("barman || Order:  ${payloadArg(1)}")
			forward waitermind -m barmanOrderReady : barmanOrderReady($payloadArg(0))
		}		
	}
	Goto waitOrder
	
	State endState{
		println("barman || END")
		terminate 0
	}
}







