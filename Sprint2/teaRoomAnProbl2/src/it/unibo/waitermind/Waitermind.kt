/* Generated by AN DISI Unibo */ 
package it.unibo.waitermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waitermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "startState"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
				
				val DoClear = 1
				val DoSanitize = 2
				val DoClean = 3
				
				val CollectTime = 4000L
						 
				val X_home = "0"
				val Y_home = "0"
				
				val X_bar = "6"
				val Y_bar = "0"
				
				val X_entrance = "0"
				val Y_entrance = "4"
				
				val X_exit = "6"
				val Y_exit = "4"
				
				val X_table_1 = "2"
				val Y_table_1 = "2"
				
				val X_table_2 = "0"
				val Y_table_2 = "0"
				
				data class Table(var state: String ="tableClean") { }
				val table1 = Table()
				val table2 = Table()
				var stateTable1 = "tableClean"
				var stateTable2 = "tableClean"
				
				
		return { //this:ActionBasciFsm
				state("startState") { //this:State
					action { //it:State
						println("waitermind || START")
						updateResourceRep( "startState"  
						)
					}
					 transition(edgeName="t00",targetState="rest",cond=whenDispatch("engineReady"))
				}	 
				state("rest") { //this:State
					action { //it:State
						println("waitermind || rest")
						updateResourceRep( "rest" 
						)
					}
					 transition(edgeName="t11",targetState="accept",cond=whenRequest("smartbellEntryRequest"))
					transition(edgeName="t12",targetState="reachTableOrder",cond=whenDispatch("clientOrderReady"))
					transition(edgeName="t13",targetState="reachBar",cond=whenDispatch("barmanOrderReady"))
					transition(edgeName="t14",targetState="endState",cond=whenDispatch("end"))
					transition(edgeName="t15",targetState="reachTableCollect",cond=whenDispatch("clientPaymentReady"))
				}	 
				state("reachHome") { //this:State
					action { //it:State
						println("waitermind || reachHome")
						updateResourceRep( "reachHome"  
						)
						request("moveTo", "moveTo($X_home,$Y_home)" ,"waiterengine" )  
					}
					 transition(edgeName="t26",targetState="rest",cond=whenReply("done"))
				}	 
				state("accept") { //this:State
					action { //it:State
						println("waitermind || accept")
						updateResourceRep( "accept"  
						)
						if( checkMsgContent( Term.createTerm("smartbellEntryRequest(ID)"), Term.createTerm("smartbellEntryRequest(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("smartbellEntryRequest", "smartbellEntryReply", "smartbellEntryReply(payloadArg(0))"   )  
						}
					}
					 transition( edgeName="goto",targetState="reachDoor", cond=doswitch() )
				}	 
				state("reachDoor") { //this:State
					action { //it:State
						println("waitermind || reachDoor")
						updateResourceRep( "reachDoor"  
						)
						println("INVIO IL MOVETO")
						request("moveTo", "moveTo($X_entrance,$Y_entrance)" ,"waiterengine" )  
						println("INVIATO IL MOVETO")
					}
					 transition(edgeName="t37",targetState="convoyTable",cond=whenReply("done"))
				}	 
				state("convoyTable") { //this:State
					action { //it:State
						println("premere invio per veriricare posizione dopo reachDoor")
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						 readLine()  
						println("waitermind || convoyTable")
						updateResourceRep( "convoyTable" 
						)
						delay(500) 
						request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
					}
					 transition(edgeName="t48",targetState="reachHome",cond=whenReply("done"))
				}	 
				state("reachTableOrder") { //this:State
					action { //it:State
						println("waitermind || reachTableOrder")
						updateResourceRep( "reachTableOrder" 
						)
						request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
					}
					 transition(edgeName="t59",targetState="waitOrderClient",cond=whenReply("done"))
				}	 
				state("waitOrderClient") { //this:State
					action { //it:State
						println("premere invio per veriricare posizione al tavolo per prendere ordine")
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						 readLine()  
						println("waitermind || waitOrderClient")
						updateResourceRep( "waitOrderClient"  
						)
					}
					 transition(edgeName="t610",targetState="trasmit",cond=whenDispatch("clientOrder"))
				}	 
				state("trasmit") { //this:State
					action { //it:State
						println("waitermind || trasmit")
						updateResourceRep( "trasmit" 
						)
						println("Messaggio per il barman")
						if( checkMsgContent( Term.createTerm("clientOrder(ID,ORDER)"), Term.createTerm("clientOrder(ID,ORDER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Invio messaggio barman")
								forward("waiterOrderForward", "waiterOrderForward(payloadArg(0),payloadArg(1))" ,"barman" ) 
								println("Inviato")
						}
						println("Messaggio inviato al barman?")
					}
					 transition( edgeName="goto",targetState="reachHome", cond=doswitch() )
				}	 
				state("reachBar") { //this:State
					action { //it:State
						println("waitermind || reachBar")
						updateResourceRep( "reachBar" 
						)
						request("moveTo", "moveTo($X_bar,$Y_bar)" ,"waiterengine" )  
					}
					 transition(edgeName="t611",targetState="serveTable",cond=whenReply("done"))
				}	 
				state("serveTable") { //this:State
					action { //it:State
						println("premere invio per veriricare posizione dal barman")
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						 readLine()  
						println("waitermind || serveTable")
						updateResourceRep( "serveTable" 
						)
						delay(1000) 
						request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
						 table1.state = "tableDirty"  
					}
					 transition(edgeName="t712",targetState="reachHome",cond=whenReply("done"))
				}	 
				state("reachTableCollect") { //this:State
					action { //it:State
						println("waitermind || reachTableCollect")
						updateResourceRep( "reachTableCollect" 
						)
						request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
					}
					 transition(edgeName="t813",targetState="collect",cond=whenReply("done"))
				}	 
				state("collect") { //this:State
					action { //it:State
						println("premere invio per veriricare posizione per collect")
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						 readLine()  
						println("waitermind || collect")
						updateResourceRep( "collect" 
						)
						delay(CollectTime)
					}
					 transition( edgeName="goto",targetState="convoyExit", cond=doswitch() )
				}	 
				state("convoyExit") { //this:State
					action { //it:State
						println("waitermind || convoyExit")
						updateResourceRep( "convoyExit" 
						)
						request("moveTo", "moveTo($X_exit,$Y_exit)" ,"waiterengine" )  
					}
					 transition(edgeName="t914",targetState="reachTableClean",cond=whenReply("done"))
				}	 
				state("reachTableClean") { //this:State
					action { //it:State
						println("premere invio per veriricare posizione exit")
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						 readLine()  
						println("waitermind || reachTableClean")
						updateResourceRep( "reachTableClean" 
						)
						delay(1000) 
						request("moveTo", "moveTo($X_table_1,$Y_table_1)" ,"waiterengine" )  
					}
					 transition(edgeName="t1015",targetState="tableClearing",cond=whenReply("done"))
				}	 
				state("tableClearing") { //this:State
					action { //it:State
						println("premere invio per veriricare posizione tavolo che sto pulendo")
						updateResourceRep(""+itunibo.planner.plannerUtil.getPosX()+","+itunibo.planner.plannerUtil.getPosY() 
						)
						 readLine()  
						println("waitermind || tableClearing")
						updateResourceRep( "tableClearing" 
						)
						 table1.state = "tableClearing"  
						forward("clean", "clean($DoClear)" ,"waiterengine" ) 
					}
					 transition(edgeName="t1116",targetState="tableSanitizing",cond=whenDispatch("doneCleanRun"))
				}	 
				state("tableSanitizing") { //this:State
					action { //it:State
						println("waitermind || tableSanitizing")
						updateResourceRep( "tableSanitizing" 
						)
						 table1.state = "tableSanitizing"  
						forward("clean", "clean($DoSanitize)" ,"waiterengine" ) 
					}
					 transition(edgeName="t1217",targetState="tableCleaning",cond=whenDispatch("doneCleanRun"))
				}	 
				state("tableCleaning") { //this:State
					action { //it:State
						println("waitermind || tableCleaning")
						updateResourceRep( "tableCleaning" 
						)
						 table1.state = "tableCleaning"  
						forward("clean", "clean($DoClean)" ,"waiterengine" ) 
					}
					 transition(edgeName="t1218",targetState="updateTableCleaned",cond=whenDispatch("doneCleanRun"))
				}	 
				state("updateTableCleaned") { //this:State
					action { //it:State
						println("waitermind || updateTableCleaned")
						updateResourceRep( "updateTableCleaned"  
						)
						 table1.state = "tableCleaned"  
					}
					 transition( edgeName="goto",targetState="reachHome", cond=doswitch() )
				}	 
				state("endState") { //this:State
					action { //it:State
						println("waitermind || TERMINATES")
						forward("end", "end(V)" ,"waiterengine" ) 
						terminate(0)
					}
				}	 
			}
		}
}
