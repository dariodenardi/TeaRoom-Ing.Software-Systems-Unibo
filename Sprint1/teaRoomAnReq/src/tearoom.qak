System tearoom 

//Messages **********************************************************************
//DIVISI PER CHI INVIA 

//**********CLIENT 
Request clientRingEntryRequest : clientEntryRequest(PAYLOAD)
Reply clientRingEntryReply : clientEntryReply(ID) //invia smartbell in realtà

Dispatch clientOrderReady : clientOrderReady(ID)
Dispatch clientOrder : clientOrder (ID, ORDER)
Dispatch clientPaymentReady : clientPaymentReady(ID)

//**********SMARTBELL
Request smartbellEntryRequest : smartbellEntryRequest(ID)
Reply smartbellEntryReply : smartbellEntryReply(ID)
Dispatch smartbellClientRejected : smartbellClientRejected(TEMP) //verso se stesso


//**********BARMAN
Dispatch barmanOrderReady : barmanOrderReady(ID) //= a tavolo o cliente id (per distinguere in futuro)


//**********WAITER
Dispatch waiterOrderForward : waiterOrderForward(ID, ORDER) //Order contenente ID cl. o tavolo (in futuro per distringuere)

//**********WAITER
Dispatch end : end(V)

//**********
Dispatch initSimulation : initSimulation(P)

//end messages ******************************************************************* 
//context and QActors 
Context ctxtearoom ip [host="127.0.0.1" port=8040]

QActor waiter context ctxtearoom{
	//inizializzazione varibili
	[#		
		val DoClear = 1
		val DoSanitize = 2
		val DoClean = 3
		
		val CollectTime = 4000L
		val DelayTakeDrink = 2000L
		val DelayTakeClient = 2000L
		
		data class Table(var state: String ="tableClean") { }
		val table1 = Table()
		val table2 = Table()
		var stateTable1 = "tableClean"
		var stateTable2 = "tableClean"
	#]
	
	State startState initial{
		println("waiter 	|| START")
		updateResource [# "startState" #] 
	}
	Goto rest
	
	State rest{
		println("waiter		|| rest")
		updateResource [# "rest"#]
	}//end rest
	Transition t1	whenRequest smartbellEntryRequest -> accept
					whenMsg clientOrderReady -> reachTableOrder
					whenMsg barmanOrderReady -> reachBar
					whenMsg end -> endState
					whenMsg clientPaymentReady -> reachTableCollect
					
	State reachHome{
		println("waiter		|| reachHome")
		updateResource [# "reachHome" #]
		
	}//end reachHome
	Goto rest
	
	State accept{
		println("waiter		|| accept")
		updateResource [# "accept" #]
		
		onMsg(smartbellEntryRequest : smartbellEntryRequest(ID)){
			println("waiter 	|| Ricevuta richiesta da ID: ${ payloadArg(0) }")
			replyTo smartbellEntryRequest with smartbellEntryReply : smartbellEntryReply($payloadArg(0))	
		}
				
	}//end accept
	Goto reachDoor
	
	State reachDoor{
		println("waiter 	|| reachDoor") 
		updateResource [# "reachDoor" #]
		
//		//TEST
		[# readLine() #]
//		TEST
		
	}//end reachDoor
	Goto convoyTable
	
	State convoyTable{
		println("waiter 	|| convoyTable")
		updateResource [# "convoyTable"#]
		delayVar DelayTakeClient	
		
		//STATO TAVOLO TO CHANGE
		[# table1.state="tableoccupied" #]
		//Controllare il tavolo libero
	}//end convoyTable
	Goto reachHome
	
	
	State reachTableOrder{ 
		println("waiter 	|| reachTableOrder")
		updateResource [# "reachTableOrder"#]
		//check table ordering
		onMsg(clientOrderReady : clientOrderReady(ID) ){
			println("waitermind 	|| client pronto per ordinare ID : ${payloadArg(0)}")
		}
		
	}//end reachTableOrder
	Goto waitOrderClient

	State waitOrderClient{ 
		
		println("waiter 	|| waitOrderClient")
		updateResource [# "waitOrderClient" #]
		
		//TEST
		[# readLine() #]
		//TEST
		
	}
	Transition t6	whenMsg clientOrder -> trasmit
	
	State trasmit {
		println("waiter 	|| trasmit")
		updateResource [# "trasmit"#]	
		onMsg(clientOrder : clientOrder(ID, ORDER)){
			println("waiter 	|| ricevuto ordine ID,ORDER: ${payloadArg(0)},${payloadArg(1)} ")
			forward barman -m waiterOrderForward : waiterOrderForward($payloadArg(0), $payloadArg(1))
		}
	}// end trasmit
	Goto reachHome
	
	State reachBar{
		println("waiter 	|| reachBar")
		updateResource [# "reachBar"#]	
		onMsg(barmanOrderReady : barmanOrderReady(ID)){
			println("waiter 	|| order ready client ID: ${payloadArg(0)}")
		}
	}//end reachBar
	Goto serveTable
	
	State serveTable{
		//TEST
		[# readLine() #]
		//TEST
		println("waiter 	|| serveTable")
		updateResource [# "serveTable"#]	
		delayVar DelayTakeDrink
		
	}//end serveTable
	Goto reachHome
	
	State reachTableCollect{
		println("waiter 	|| reachTableCollect")
		updateResource [# "reachTableCollect"#]
		onMsg(clientPaymentReady : clientPaymentReady(ID)){
			println("waiter 	|| client wants to pay ID : ${payloadArg(0)}")
		}
	}//end reachTableCollect
	Goto collect
	
	State collect{
		//TEST
		[# readLine() #]
		//TEST
		
		println("waiter 	|| collect")
		updateResource [# "collect"#]
		//delay time perchè ci metto un po' a prendere il cash
		delayVar CollectTime
	}//end collect
	Goto convoyExit
	 
	State convoyExit{
		println("waiter		|| convoyExit")
		updateResource [# "convoyExit"#]
		
		
		//STATO DEL TAVOLO DA CAMBIARE
		[# table1.state="tableDirty" #]
	}//end convoyExit
	Goto reachTableClean
	
	State reachTableClean{		
		println("waiter		|| reachTableClean")
		updateResource [# "reachTableClean"#]
		delay 1000
	}//end reachTableClear
	Goto tableClearing

	State tableClearing{		
		println("waiter		|| tableClearing")
		updateResource [# "tableClearing"#]
		
		[# table1.state = "tableClearing" #]

	}//end tableClear
	Goto tableSanitizing
	
	
	State tableSanitizing{
		println("waiter		|| tableSanitizing")
		updateResource [# "tableSanitizing"#]
		
		[# table1.state = "tableSanitizing" #]
	}//end tableSanitize
	Goto tableCleaning
	
	State tableCleaning{
		println("waiter		|| tableCleaning")
		updateResource [# "tableCleaning"#]
		
		[# table1.state = "tableCleaning" #]
	}//end tableClean
	Goto updateTableCleaned
	
	State updateTableCleaned{
		println("waiter		|| updateTableCleaned")
		updateResource [# "updateTableCleaned" #]
		
		[# table1.state = "tableCleaned" #]
	}
	Goto reachHome
	
	
	
	State endState{
		println("waiter || TERMINATES")
		terminate 0
	}//end endState
	
	
	
}

QActor smartbell context ctxtearoom{
	[# 
		val Temp_max = 37.5
		var ID_client = 1
		var N_client_rejected = 0
		var ClientTemp : Double = 0.0
	#]

	State s0 initial{
		println("smartbell || START")
		updateResource [# "START" #]
	} 
	Goto waitRing
	
	State waitRing{
		println("smartbell || waitRing")
		updateResource [# "waitRing" #]		
	}
	Transition t0 	whenRequest clientRingEntryRequest -> checkTempClient
					whenMsg end -> endState
	State checkTempClient{ 
		[# ClientTemp = kotlin.math.round(  (Math.random()*6+35)*10 )/10 #] //random temperature
		println("smartbell || checkTempClient")
		updateResource [# "checkTempClient" #]
		if [# ClientTemp < Temp_max #]
		{
			println("smartbell || clienteAccettatoDaSmartBell || temperatura = $ClientTemp || id_client = $ID_client")
			request waiter -m smartbellEntryRequest : smartbellEntryRequest($ID_client)  
			[# ID_client++ #]
		}
		else
		{
			println("smartbell || clienteRifiutatoDaSmartBell || temperatura = $ClientTemp")
			forward smartbell -m smartbellClientRejected : smartbellClientRejected($ClientTemp) //per questione statistica
			
		}
	}  
	Transition t1 	whenReply 	smartbellEntryReply -> checkWaiterReply	
					whenMsg 	smartbellClientRejected -> clientRejected
	
	State checkWaiterReply{
		onMsg(smartbellEntryReply : smartbellEntryReply(ID)){
			println("smartbell || ricevuta reply ID : ${ payloadArg(0) }")
			replyTo clientRingEntryRequest with clientRingEntryReply : clientRingEntryReply($payloadArg(0))
		}
	}
	Goto waitRing
	
	State clientRejected{
		[# N_client_rejected++ #]
		onMsg(smartbellClientRejected : smartbellClientRejected(TEMP)){ //rispondo con temperatura (maggior del normale)
			replyTo clientRingEntryRequest with clientRingEntryReply : clientRingEntryReply(payloadArg(0)) 
		}
	}
	Goto waitRing
	
	State endState{
		println("smartbell || END")
		terminate 0
	}
	
}

QActor barman context ctxtearoom{
	[#
		val TimePrepareOrder = 2000L
	#]
	State s0 initial{
		println("barman 	|| START")
		updateResource [# "START" #] 
	}
	Goto waitOrder
	
	State waitOrder{
		println("barman 	|| waitOrder")
		updateResource [# "waitOrder" #]		
	}
	Transition t0 	whenMsg waiterOrderForward -> prepareOrder
					whenMsg end -> endState
	
	State prepareOrder{ 
		println("barman 	|| prepareOrder")
		updateResource [# "prepareOrder" #]
		delayVar TimePrepareOrder
		onMsg(waiterOrderForward : waiterOrderForward(ID, ORDER)){
			println("barman 	|| Order:  ${payloadArg(1)}")
			forward waiter -m barmanOrderReady : barmanOrderReady($payloadArg(0))
		}		
	}
	Goto waitOrder
	
	State endState{
		println("barman 	|| END")
		terminate 0
	}
}