/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val TimePrepareOrder = 2000L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("barman 	|| START")
						updateResourceRep( "START"  
						)
					}
					 transition( edgeName="goto",targetState="waitOrder", cond=doswitch() )
				}	 
				state("waitOrder") { //this:State
					action { //it:State
						println("barman 	|| waitOrder")
						updateResourceRep( "waitOrder"  
						)
					}
					 transition(edgeName="t027",targetState="prepareOrder",cond=whenDispatch("waiterOrderForward"))
					transition(edgeName="t028",targetState="endState",cond=whenDispatch("end"))
				}	 
				state("prepareOrder") { //this:State
					action { //it:State
						println("barman 	|| prepareOrder")
						updateResourceRep( "prepareOrder"  
						)
						delay(TimePrepareOrder)
						if( checkMsgContent( Term.createTerm("waiterOrderForward(ID,ORDER)"), Term.createTerm("waiterOrderForward(ID,ORDER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("barman 	|| Order:  ${payloadArg(1)}")
								forward("barmanOrderReady", "barmanOrderReady(${payloadArg(0)})" ,"waitermind" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitOrder", cond=doswitch() )
				}	 
				state("endState") { //this:State
					action { //it:State
						println("barman 	|| END")
						terminate(0)
					}
				}	 
			}
		}
}
