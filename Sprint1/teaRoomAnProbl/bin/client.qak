System tearoom2

Request clientRingEntryRequest : clientEntryRequest(PAYLOAD)
Reply clientRingEntryReply : clientEntryReply(ID) //invia smartbell in realtà

Dispatch clientOrderReady : clientOrderReady(ID)
Dispatch clientOrder : clientOrder (ID, ORDER)
Dispatch clientPaymentReady : clientPaymentReady(ID)

Context ctxtearoom2 ip [host="localhost" port=8060] 
Context ctxtearoom ip [host="127.0.0.1" port=8040]

ExternalQActor waitermind context ctxtearoom 
ExternalQActor smartbell context ctxtearoom 

QActor client context ctxtearoom2 {
	[#
		var ID = ""
		val Order = "pesca"
	#]
	
	State s0 initial{
		println("client || START")
		updateResource [# "START" #]
	}
	//Transition t0 	whenMsg initSimulation -> ringBell
	Goto ringBell
	
	State ringBell{
		println("client || Ring the bell")
		updateResource [# "Ring" #]
		
		//[# readLine() #]
		
		request smartbell -m clientRingEntryRequest : clientRingEntryRequest(entrare)
	}
	Transition t1 	whenReply clientRingEntryReply -> simulate
	
	State simulate{		
		println("client || Ready to order")
		updateResource [# "OrderReady" #]
		onMsg(clientRingEntryReply : clientRingEntryReply){
			[#ID = payloadArg(0)#]
			println("Il mio ID= $ID")
		}
		
	//	[# readLine() #]
		
		forward waitermind -m clientOrderReady : clientOrderReady($ID)
		
		//delay 20000
		[# readLine() #]
		
		println("client || Sending the order")
		updateResource [# "Ordering" #]
		forward waitermind -m clientOrder : clientOrder($ID, $Order)
		
		//delay 20000
	//	[# readLine() #]
		
		println("client || I want to pay")
		updateResource [# "Paying" #]
		forward waitermind -m clientPaymentReady : clientPaymentReady($ID)
		
		//delay 20000
	//	[# readLine() #]
	}
	Goto end
	
	State end{
		println("client || END")
		terminate 0
	} 
}
